//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KCM.ServiciosInternet.Site.Entity.www.gana.kleenbebe.com_1.BD.EF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class GanaKleenbebe : DbContext
    {
        public GanaKleenbebe()
            : base("name=GanaKleenbebe")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Competitor> Competitors { get; set; }
        public virtual DbSet<GameInfo> GameInfoes { get; set; }
        public virtual DbSet<Param> Params { get; set; }
        public virtual DbSet<PivotDay> PivotDays { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Size> Sizes { get; set; }
        public virtual DbSet<Ticket> Tickets { get; set; }
        public virtual DbSet<vwGame> vwGames { get; set; }
        public virtual DbSet<vwTicketByPivotDay> vwTicketByPivotDays { get; set; }
        public virtual DbSet<AdminUser> AdminUsers { get; set; }
    
        public virtual ObjectResult<Nullable<int>> SP_GetAttemps(string uID)
        {
            var uIDParameter = uID != null ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_GetAttemps", uIDParameter);
        }
    
        public virtual ObjectResult<string> SP_GetGameInfo(Nullable<System.DateTime> todayDt)
        {
            var todayDtParameter = todayDt.HasValue ?
                new ObjectParameter("todayDt", todayDt) :
                new ObjectParameter("todayDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetGameInfo", todayDtParameter);
        }
    
        public virtual ObjectResult<string> SP_GetParamsFromGame(Nullable<int> idGameinfo)
        {
            var idGameinfoParameter = idGameinfo.HasValue ?
                new ObjectParameter("IdGameinfo", idGameinfo) :
                new ObjectParameter("IdGameinfo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetParamsFromGame", idGameinfoParameter);
        }
    
        public virtual ObjectResult<SP_GetScore_Result> SP_GetScore(string uID, Nullable<System.DateTime> todayDate)
        {
            var uIDParameter = uID != null ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(string));
    
            var todayDateParameter = todayDate.HasValue ?
                new ObjectParameter("TodayDate", todayDate) :
                new ObjectParameter("TodayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetScore_Result>("SP_GetScore", uIDParameter, todayDateParameter);
        }
    
        public virtual ObjectResult<string> SP_InsertTicket(Nullable<decimal> productPrice, Nullable<int> productClave, string productTicket, string uID, string path, string firstName, string lastName, string email, Nullable<int> birthYear, Nullable<int> birthMonth, Nullable<int> birthDay, string cellPhone, Nullable<System.DateTime> todayDt)
        {
            var productPriceParameter = productPrice.HasValue ?
                new ObjectParameter("productPrice", productPrice) :
                new ObjectParameter("productPrice", typeof(decimal));
    
            var productClaveParameter = productClave.HasValue ?
                new ObjectParameter("productClave", productClave) :
                new ObjectParameter("productClave", typeof(int));
    
            var productTicketParameter = productTicket != null ?
                new ObjectParameter("productTicket", productTicket) :
                new ObjectParameter("productTicket", typeof(string));
    
            var uIDParameter = uID != null ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var birthYearParameter = birthYear.HasValue ?
                new ObjectParameter("BirthYear", birthYear) :
                new ObjectParameter("BirthYear", typeof(int));
    
            var birthMonthParameter = birthMonth.HasValue ?
                new ObjectParameter("BirthMonth", birthMonth) :
                new ObjectParameter("BirthMonth", typeof(int));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(int));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var todayDtParameter = todayDt.HasValue ?
                new ObjectParameter("todayDt", todayDt) :
                new ObjectParameter("todayDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_InsertTicket", productPriceParameter, productClaveParameter, productTicketParameter, uIDParameter, pathParameter, firstNameParameter, lastNameParameter, emailParameter, birthYearParameter, birthMonthParameter, birthDayParameter, cellPhoneParameter, todayDtParameter);
        }
    
        public virtual int SP_UpdateSaveGame(Nullable<int> pivotDayId, Nullable<long> idGame, Nullable<System.DateTime> endGameDt, string time)
        {
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            var idGameParameter = idGame.HasValue ?
                new ObjectParameter("IdGame", idGame) :
                new ObjectParameter("IdGame", typeof(long));
    
            var endGameDtParameter = endGameDt.HasValue ?
                new ObjectParameter("EndGameDt", endGameDt) :
                new ObjectParameter("EndGameDt", typeof(System.DateTime));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateSaveGame", pivotDayIdParameter, idGameParameter, endGameDtParameter, timeParameter);
        }
    
        public virtual ObjectResult<SP_UpdateSetGame_Result> SP_UpdateSetGame(string uID, Nullable<System.DateTime> todayDt)
        {
            var uIDParameter = uID != null ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(string));
    
            var todayDtParameter = todayDt.HasValue ?
                new ObjectParameter("todayDt", todayDt) :
                new ObjectParameter("todayDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UpdateSetGame_Result>("SP_UpdateSetGame", uIDParameter, todayDtParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetAttemps(string uID)
        {
            var uIDParameter = uID != null ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAttemps", uIDParameter);
        }
    
        public virtual ObjectResult<string> GetGameInfo(Nullable<System.DateTime> todayDt)
        {
            var todayDtParameter = todayDt.HasValue ?
                new ObjectParameter("todayDt", todayDt) :
                new ObjectParameter("todayDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetGameInfo", todayDtParameter);
        }
    
        public virtual ObjectResult<string> GetParamsFromGame(Nullable<int> idGameinfo)
        {
            var idGameinfoParameter = idGameinfo.HasValue ?
                new ObjectParameter("IdGameinfo", idGameinfo) :
                new ObjectParameter("IdGameinfo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetParamsFromGame", idGameinfoParameter);
        }
    
        public virtual ObjectResult<GetScore_Result> GetScore(string uID, Nullable<System.DateTime> todayDate)
        {
            var uIDParameter = uID != null ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(string));
    
            var todayDateParameter = todayDate.HasValue ?
                new ObjectParameter("TodayDate", todayDate) :
                new ObjectParameter("TodayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScore_Result>("GetScore", uIDParameter, todayDateParameter);
        }
    
        public virtual ObjectResult<string> InsertTicket(Nullable<decimal> productPrice, Nullable<int> productClave, string productTicket, string uID, string path, string firstName, string lastName, string email, Nullable<int> birthYear, Nullable<int> birthMonth, Nullable<int> birthDay, string cellPhone, Nullable<System.DateTime> todayDt)
        {
            var productPriceParameter = productPrice.HasValue ?
                new ObjectParameter("productPrice", productPrice) :
                new ObjectParameter("productPrice", typeof(decimal));
    
            var productClaveParameter = productClave.HasValue ?
                new ObjectParameter("productClave", productClave) :
                new ObjectParameter("productClave", typeof(int));
    
            var productTicketParameter = productTicket != null ?
                new ObjectParameter("productTicket", productTicket) :
                new ObjectParameter("productTicket", typeof(string));
    
            var uIDParameter = uID != null ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var birthYearParameter = birthYear.HasValue ?
                new ObjectParameter("BirthYear", birthYear) :
                new ObjectParameter("BirthYear", typeof(int));
    
            var birthMonthParameter = birthMonth.HasValue ?
                new ObjectParameter("BirthMonth", birthMonth) :
                new ObjectParameter("BirthMonth", typeof(int));
    
            var birthDayParameter = birthDay.HasValue ?
                new ObjectParameter("BirthDay", birthDay) :
                new ObjectParameter("BirthDay", typeof(int));
    
            var cellPhoneParameter = cellPhone != null ?
                new ObjectParameter("CellPhone", cellPhone) :
                new ObjectParameter("CellPhone", typeof(string));
    
            var todayDtParameter = todayDt.HasValue ?
                new ObjectParameter("todayDt", todayDt) :
                new ObjectParameter("todayDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertTicket", productPriceParameter, productClaveParameter, productTicketParameter, uIDParameter, pathParameter, firstNameParameter, lastNameParameter, emailParameter, birthYearParameter, birthMonthParameter, birthDayParameter, cellPhoneParameter, todayDtParameter);
        }
    
        public virtual int UpdateSaveGame(Nullable<int> pivotDayId, Nullable<long> idGame, Nullable<System.DateTime> endGameDt, string time)
        {
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            var idGameParameter = idGame.HasValue ?
                new ObjectParameter("IdGame", idGame) :
                new ObjectParameter("IdGame", typeof(long));
    
            var endGameDtParameter = endGameDt.HasValue ?
                new ObjectParameter("EndGameDt", endGameDt) :
                new ObjectParameter("EndGameDt", typeof(System.DateTime));
    
            var timeParameter = time != null ?
                new ObjectParameter("Time", time) :
                new ObjectParameter("Time", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSaveGame", pivotDayIdParameter, idGameParameter, endGameDtParameter, timeParameter);
        }
    
        public virtual ObjectResult<UpdateSetGame_Result> UpdateSetGame(string uID, Nullable<System.DateTime> todayDt)
        {
            var uIDParameter = uID != null ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(string));
    
            var todayDtParameter = todayDt.HasValue ?
                new ObjectParameter("todayDt", todayDt) :
                new ObjectParameter("todayDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UpdateSetGame_Result>("UpdateSetGame", uIDParameter, todayDtParameter);
        }
    
        public virtual ObjectResult<SP_Winners_GetRangeDates_Result> SP_Winners_GetRangeDates(Nullable<System.DateTime> todayDate)
        {
            var todayDateParameter = todayDate.HasValue ?
                new ObjectParameter("todayDate", todayDate) :
                new ObjectParameter("todayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Winners_GetRangeDates_Result>("SP_Winners_GetRangeDates", todayDateParameter);
        }
    
        public virtual ObjectResult<Winners_GetRangeDates_Result> Winners_GetRangeDates(Nullable<System.DateTime> todayDate)
        {
            var todayDateParameter = todayDate.HasValue ?
                new ObjectParameter("todayDate", todayDate) :
                new ObjectParameter("todayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Winners_GetRangeDates_Result>("Winners_GetRangeDates", todayDateParameter);
        }
    
        public virtual ObjectResult<SP_Winners_GetTickets_Result> SP_Winners_GetTickets(Nullable<int> numberOfTickets, string bestTimeIdTicket, Nullable<int> pivotDayId)
        {
            var numberOfTicketsParameter = numberOfTickets.HasValue ?
                new ObjectParameter("NumberOfTickets", numberOfTickets) :
                new ObjectParameter("NumberOfTickets", typeof(int));
    
            var bestTimeIdTicketParameter = bestTimeIdTicket != null ?
                new ObjectParameter("BestTimeIdTicket", bestTimeIdTicket) :
                new ObjectParameter("BestTimeIdTicket", typeof(string));
    
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Winners_GetTickets_Result>("SP_Winners_GetTickets", numberOfTicketsParameter, bestTimeIdTicketParameter, pivotDayIdParameter);
        }
    
        public virtual ObjectResult<Winners_GetTickets_Result> Winners_GetTickets(Nullable<int> numberOfTickets, string bestTimeIdTicket, Nullable<int> pivotDayId)
        {
            var numberOfTicketsParameter = numberOfTickets.HasValue ?
                new ObjectParameter("NumberOfTickets", numberOfTickets) :
                new ObjectParameter("NumberOfTickets", typeof(int));
    
            var bestTimeIdTicketParameter = bestTimeIdTicket != null ?
                new ObjectParameter("BestTimeIdTicket", bestTimeIdTicket) :
                new ObjectParameter("BestTimeIdTicket", typeof(string));
    
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Winners_GetTickets_Result>("Winners_GetTickets", numberOfTicketsParameter, bestTimeIdTicketParameter, pivotDayIdParameter);
        }
    
        public virtual int SP_Winners_UpdateTicketByPivotDay(Nullable<int> pivotDayId)
        {
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Winners_UpdateTicketByPivotDay", pivotDayIdParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Winners_UpdateTicketByPivotDay(Nullable<int> pivotDayId)
        {
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Winners_UpdateTicketByPivotDay", pivotDayIdParameter);
        }
    
        public virtual ObjectResult<SP_Winners_GetAllTickets_Result> SP_Winners_GetAllTickets(Nullable<int> pivotDayId)
        {
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Winners_GetAllTickets_Result>("SP_Winners_GetAllTickets", pivotDayIdParameter);
        }
    
        public virtual ObjectResult<Winners_GetTickets_Result> Winners_GetAllTickets(Nullable<int> pivotDayId)
        {
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Winners_GetTickets_Result>("Winners_GetAllTickets", pivotDayIdParameter);
        }
    
        public virtual ObjectResult<SP_Winners_GetGamesByTicket_Result> SP_Winners_GetGamesByTicket(string idTicket, Nullable<int> pivotDayId)
        {
            var idTicketParameter = idTicket != null ?
                new ObjectParameter("IdTicket", idTicket) :
                new ObjectParameter("IdTicket", typeof(string));
    
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Winners_GetGamesByTicket_Result>("SP_Winners_GetGamesByTicket", idTicketParameter, pivotDayIdParameter);
        }
    
        public virtual ObjectResult<Winners_GetGamesByTicket_Result> Winners_GetGamesByTicket(string idTicket, Nullable<int> pivotDayId)
        {
            var idTicketParameter = idTicket != null ?
                new ObjectParameter("IdTicket", idTicket) :
                new ObjectParameter("IdTicket", typeof(string));
    
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Winners_GetGamesByTicket_Result>("Winners_GetGamesByTicket", idTicketParameter, pivotDayIdParameter);
        }
    
        public virtual int SP_Winners_UpdateTickets(Nullable<int> pivotDayId, string jsonTickets, string email)
        {
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            var jsonTicketsParameter = jsonTickets != null ?
                new ObjectParameter("JsonTickets", jsonTickets) :
                new ObjectParameter("JsonTickets", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Winners_UpdateTickets", pivotDayIdParameter, jsonTicketsParameter, emailParameter);
        }
    
        public virtual int Winners_UpdateTickets(Nullable<int> pivotDayId, string jsonTickets, string email)
        {
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            var jsonTicketsParameter = jsonTickets != null ?
                new ObjectParameter("JsonTickets", jsonTickets) :
                new ObjectParameter("JsonTickets", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Winners_UpdateTickets", pivotDayIdParameter, jsonTicketsParameter, emailParameter);
        }
    
        public virtual ObjectResult<string> SP_Winners_UpdateLockPivotDay(Nullable<int> pivotDayId, string email)
        {
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_Winners_UpdateLockPivotDay", pivotDayIdParameter, emailParameter);
        }
    
        public virtual ObjectResult<string> Winners_UpdateLockPivotDay(Nullable<int> pivotDayId, string email)
        {
            var pivotDayIdParameter = pivotDayId.HasValue ?
                new ObjectParameter("PivotDayId", pivotDayId) :
                new ObjectParameter("PivotDayId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Winners_UpdateLockPivotDay", pivotDayIdParameter, emailParameter);
        }
    
        public virtual ObjectResult<SP_Winners_GetUserRecords_Result> SP_Winners_GetUserRecords(string uID)
        {
            var uIDParameter = uID != null ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Winners_GetUserRecords_Result>("SP_Winners_GetUserRecords", uIDParameter);
        }
    
        public virtual ObjectResult<Winners_GetUserRecords_Result> Winners_GetUserRecords(string uID)
        {
            var uIDParameter = uID != null ?
                new ObjectParameter("UID", uID) :
                new ObjectParameter("UID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Winners_GetUserRecords_Result>("Winners_GetUserRecords", uIDParameter);
        }
    
        public virtual ObjectResult<string> SP_Pivot_DeletePivotDay(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_Pivot_DeletePivotDay", idParameter);
        }
    
        public virtual ObjectResult<SP_Pivot_GetGameInfo_Result> SP_Pivot_GetGameInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Pivot_GetGameInfo_Result>("SP_Pivot_GetGameInfo");
        }
    
        public virtual ObjectResult<SP_Pivot_GetParams_Result> SP_Pivot_GetParams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Pivot_GetParams_Result>("SP_Pivot_GetParams");
        }
    
        public virtual ObjectResult<SP_Pivot_GetPivotDays_Result> SP_Pivot_GetPivotDays()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Pivot_GetPivotDays_Result>("SP_Pivot_GetPivotDays");
        }
    
        public virtual ObjectResult<string> SP_Pivot_UpdatePivotDay(Nullable<int> id, string pivotDate, Nullable<int> idGameinfo, Nullable<bool> isProcessed, Nullable<int> days, string idParam)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var pivotDateParameter = pivotDate != null ?
                new ObjectParameter("PivotDate", pivotDate) :
                new ObjectParameter("PivotDate", typeof(string));
    
            var idGameinfoParameter = idGameinfo.HasValue ?
                new ObjectParameter("IdGameinfo", idGameinfo) :
                new ObjectParameter("IdGameinfo", typeof(int));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var idParamParameter = idParam != null ?
                new ObjectParameter("IdParam", idParam) :
                new ObjectParameter("IdParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_Pivot_UpdatePivotDay", idParameter, pivotDateParameter, idGameinfoParameter, isProcessedParameter, daysParameter, idParamParameter);
        }
    
        public virtual ObjectResult<string> Pivot_DeletePivotDay(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Pivot_DeletePivotDay", idParameter);
        }
    
        public virtual ObjectResult<Pivot_ComboBox_Result> Pivot_GetGameInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pivot_ComboBox_Result>("Pivot_GetGameInfo");
        }
    
        public virtual ObjectResult<Pivot_ComboBox_Result> Pivot_GetParams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pivot_ComboBox_Result>("Pivot_GetParams");
        }
    
        public virtual ObjectResult<Pivot_GetPivotDays_Result> Pivot_GetPivotDays()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pivot_GetPivotDays_Result>("Pivot_GetPivotDays");
        }
    
        public virtual ObjectResult<string> Pivot_UpdatePivotDay(Nullable<int> id, string pivotDate, Nullable<int> idGameinfo, Nullable<bool> isProcessed, Nullable<int> days, string idParam)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var pivotDateParameter = pivotDate != null ?
                new ObjectParameter("PivotDate", pivotDate) :
                new ObjectParameter("PivotDate", typeof(string));
    
            var idGameinfoParameter = idGameinfo.HasValue ?
                new ObjectParameter("IdGameinfo", idGameinfo) :
                new ObjectParameter("IdGameinfo", typeof(int));
    
            var isProcessedParameter = isProcessed.HasValue ?
                new ObjectParameter("IsProcessed", isProcessed) :
                new ObjectParameter("IsProcessed", typeof(bool));
    
            var daysParameter = days.HasValue ?
                new ObjectParameter("Days", days) :
                new ObjectParameter("Days", typeof(int));
    
            var idParamParameter = idParam != null ?
                new ObjectParameter("IdParam", idParam) :
                new ObjectParameter("IdParam", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Pivot_UpdatePivotDay", idParameter, pivotDateParameter, idGameinfoParameter, isProcessedParameter, daysParameter, idParamParameter);
        }
    
        public virtual ObjectResult<SP_Session_GetAdminUser_Result> SP_Session_GetAdminUser(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Session_GetAdminUser_Result>("SP_Session_GetAdminUser", emailParameter);
        }
    
        public virtual ObjectResult<Session_GetAdminUser_Result> Session_GetAdminUser(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Session_GetAdminUser_Result>("Session_GetAdminUser", emailParameter);
        }
    }
}
